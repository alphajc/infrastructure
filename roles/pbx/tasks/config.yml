- name: mkdir /etc/asterisk/{{ hostvars[inventory_hostname].instance }}.*
  file:
    path: '{{ item[1] }}/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}'
    state: directory
    owner: root
    group: root
  with_nested:
    - "[{{ asterisk_list }}]"
    - ['/etc', '/var/lib', '/var/run', '/var/log', '/var/spool']
- name: mkdir /etc/asterisk/gateway
  file:
    path: '{{ item.key }}/asterisk/{{ item.value }}'
    state: directory
    owner: root
    group: root
  with_items:
    - { key: '/etc', value: 'gateway' }
    - { key: '/usr/lib', value: 'modules' }
    - { key: '/var/lib', value: 'gateway' }
    - { key: '/var/lib', value: 'agi-bin' }
    - { key: '/var/run', value: 'gateway' }
    - { key: '/var/log', value: 'gateway' }
    - { key: '/var/spool', value: 'gateway' }
- name: tar xmvf asterisk.ali.tar  /etc/asterisk
  unarchive:
    src: asterisk_conf.tar.gz
    dest: '/etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}/'
    owner: root
    group: root
  with_sequence: start={{ start }} end={{ end }} #stride=1
- name: tar zxf ass.tar.gz
  unarchive:
    src: '{{ item.file }}'
    dest: '{{ item.dest }}'
    owner: root
    group: root
  with_items:
    - { file: 'ass.tar.gz', dest: '/opt' }
    - { file: 'asteriskGuard-proxy.tar.gz', dest: '/opt' }
    - { file: 'gateway.tar.gz', dest: '/etc/asterisk/gateway' }
- name: sed -i s/120.55.74.105/{{ hostvars[inventory_hostname].ip }}/g
  replace:
    path: '/etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}/{{ item[1] }}'
    regexp: '120.55.74.105'
    replace: '{{ item[2] }}'
  with_nested:
    - "[{{ asterisk_list }}]"
    - ['sip.conf', 'sip_trunk.conf', 'extensions.ael']
    - '{{ hostvars[inventory_hostname].ip }}'
- name: sed -i s/120.55.74.105/{{ hostvars[inventory_hostname].ip }}/g
  replace:
    path: '/etc/asterisk/gateway/{{ item }}'
    regexp: '120.55.74.105'
    replace: '{{ hostvars[inventory_hostname].ip }}'
  with_items:
    - sip.conf
    - sip_trunk.conf
- name: vim rtp.conf
  replace:
    path: '/etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}/rtp.conf'
    regexp: '{{ item[1] }}'
    replace: '\1=1{{ item[0] }}\2'
  with_nested:
    - "[{{ asterisk_list }}]"
    - ['(rtpstart)=10(000)', '(rtpend)=10(999)']
- name: check ip network
  shell: "ipcalc -n {{ hostvars[inventory_hostname].n_ip }} {{ hostvars[inventory_hostname].mask }} | awk -F '=' '{print $2}'"
  register: network
- name: vim sip.conf localnet
  lineinfile:
    path: '/etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}/sip.conf'
    regexp: 'localnet=10.174.110.0/255.255.255.0'
    line: 'localnet={{ network.stdout }}/{{ hostvars[inventory_hostname].mask }}'
  with_sequence: start={{ start }} end={{ end }}
- name: sed -i s/6060/606$i/g
  replace:
    path: '/etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}/{{ item[1].key.file }}'
    regexp: '60{{ item[1].key.value }}0'
    replace: '60{{ item[1].key.value }}{{ item[0] }}'
  with_nested:
    - "[{{ asterisk_list }}]"
    - [{'key':{'file':'sip.conf', 'value':'6'}}, {'key':{'file':'manager.conf', 'value':'3'}}]
- name: sed -i s/bj.ali.2.0/{{ hostvars[inventory_hostname].instance }}/g
  replace:
    path: '/etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}/{{ item[1] }}'
    regexp: 'bj.ali.2.0'
    replace: '{{ item[2] }}.{{ item[0] }}'
  with_nested:
    - "[{{ asterisk_list }}]"
    - ['asterisk.conf', 'extensions.ael']
    - '{{ hostvars[inventory_hostname].instance }}'
- name: ln -s /var/lib/asterisk/{{ hostvars[inventory_hostname].instance }}.$i
  file:
    src: '{{ item[1].key }}{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}'
    dest: '{{ item[1].value.path }}/{{ hostvars[inventory_hostname].instance }}.{{ item[0] }}/{{ item[1].value.dest }}'
    state: link
    follow: no
    force: yes
  with_nested:
    - "[{{ asterisk_list }}]"
    - [{'key': '/dev/shm/astdb/astdb', 'value':{'path':'/var/lib/asterisk', 'dest':'astdb'}}, {'key':'/dev/shm/monitor', 'value':{'path':'/var/spool/asterisk', 'dest':'monitor'}}]
- name: ln -s astdbgateway astdb
  file:
    src: '{{ item.key }}'
    dest: '{{ item.value }}'
    state: link
    follow: no
    force: yes
  with_items:
    - { key: '/dev/shm/monitorgateway', value: '/var/spool/asterisk/gateway/monitor' }
    - { key: '/dev/shm/astdb/astdbgateway', value: '/var/lib/asterisk/gateway/astdb' }
- shell: cat /etc/rc.d/rc.local
  register: rclocal
- name: vim /etc/rc.d/rc.local
  blockinfile:
    path: /etc/rc.d/rc.local
    marker: '#mkdir -p /dev/shm'
    block: |
      mkdir -p /dev/shm/astdb
      mkdir -p /dev/shm/monitorgateway
      touch /dev/shm/astdb/astdbgateway
  when: rclocal.stdout.find('/dev/shm/astdb/astdbgateway') == -1
- name: vim /etc/rc.d/rc.local
  blockinfile:
    path: /etc/rc.d/rc.local
    marker: '#{{ hostvars[inventory_hostname].instance }}.{{ item }}'
    block: |1
          touch /dev/shm/astdb/astdb{{ hostvars[inventory_hostname].instance }}.{{ item }}
          mkdir -p /dev/shm/monitor{{ hostvars[inventory_hostname].instance }}.{{ item }}
          mkdir -p /var/run/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}
          mkdir -p /var/spool/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}
          /usr/sbin/asterisk -g -C /etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}/asterisk.conf
          sleep 1
  with_sequence: start={{ start }} end={{ end }}
  when: rclocal.stdout.find('/var/spool/asterisk/') == -1
- name: vim /etc/rc.d/rc.local
  blockinfile:
    path: /etc/rc.d/rc.local
    marker: '#/opt/ass/ass.sh restart'
    block: |
      cp /usr/src/astdb/* /dev/shm/astdb/
      mkdir -p /var/run/asterisk/gateway
      /usr/sbin/asterisk -g -C /etc/asterisk/gateway/asterisk.conf
      sleep 3
      /opt/ass/ass.sh restart
      sleep 3
      /opt/nginx/sbin/nginx -c /opt/nginx/conf/nginx.conf
      /opt/asteriskGuard/monitor.sh start
      /etc/init.d/nrpe start
  when: rclocal.stdout.find('/opt/asteriskGuard/monitor.sh start') == -1
- name: alias rasterisk
  lineinfile:
    path: /root/.bashrc
    regexp: "alias rasterisk{{ item }}=\'/usr/sbin/rasterisk -C /etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}/asterisk.conf\'"
    line: "alias rasterisk{{ item }}=\'/usr/sbin/rasterisk -C /etc/asterisk/{{ hostvars[inventory_hostname].instance }}.{{ item }}/asterisk.conf\'"
  with_sequence: start={{ start }} end={{ end }}
- name: alias rasteriskg
  lineinfile:
    path: /root/.bashrc
    regexp: "alias rasteriskg=\'/usr/sbin/rasterisk -C /etc/asterisk/gateway/asterisk.conf\'"
    line: "alias rasteriskg=\'/usr/sbin/rasterisk -C /etc/asterisk/gateway/asterisk.conf\'"
- name: sed -i s/10.1.12.100/{{ hostvars[inventory_hostname].instance }}/g
  replace:
    path: /opt/ass/server.conf
    regexp: '{{ item.key }}'
    replace: '{{ item.value }}'
  with_items:
    - { key: '10.1.12.100', value: '{{ hostvars[inventory_hostname].ip }}' }
    - { key: 'Instance', value: '{{ hostvars[inventory_hostname].instance }}' }
    - { key: '106.39.108.82:8081', value: '{{ hostvars[inventory_hostname].ip }}' }
- replace:
    path: /opt/asteriskGuard/asterisk.conf
    regexp: 'gz.ali.1'
    replace: '{{ hostvars[inventory_hostname].instance }}'
- name: mkdir /srv/scripts
  file:
    path: /srv/scripts
    state: directory
- name: copy clear_asterisklog.sh
  copy:
    src: clear_asterisklog.sh
    dest: /srv/scripts
    mode: 0755
    owner: root
    group: root
- name: crontab -e
  cron:
    name: "clear asterisk"
    minute: "0"
    hour: "0"
    job: "/bin/sh /srv/scripts/clear_asterisklog.sh"
- name: service crond restart
  service:
    name: crond
    state: restarted
